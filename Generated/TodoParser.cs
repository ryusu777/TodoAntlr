//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/inter/Documents/Tugas/7th/Compilation Technique/UTS/src/TodoAppCli/Todo.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TodoParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NUMBER=12, TIME=13, WORD=14, TEXT=15, WHITESPACE=16, 
		NEWLINE=17;
	public const int
		RULE_compileUnit = 0, RULE_expression = 1, RULE_show = 2, RULE_create = 3, 
		RULE_finish = 4, RULE_delete = 5, RULE_filter = 6, RULE_filterTime = 7, 
		RULE_filterCompletion = 8, RULE_description = 9, RULE_time = 10, RULE_id = 11;
	public static readonly string[] ruleNames = {
		"compileUnit", "expression", "show", "create", "finish", "delete", "filter", 
		"filterTime", "filterCompletion", "description", "time", "id"
	};

	private static readonly string[] _LiteralNames = {
		null, "'show'", "'add'", "'finish'", "'at'", "'#'", "'delete'", "'all'", 
		"'today'", "'yesterday'", "'complete'", "'incomplete'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NUMBER", "TIME", "WORD", "TEXT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Todo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TodoParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public TodoParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public TodoParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CompileUnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NEWLINE() { return GetToken(TodoParser.NEWLINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(TodoParser.Eof, 0); }
		public CompileUnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compileUnit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompileUnit(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompileUnitContext compileUnit() {
		CompileUnitContext _localctx = new CompileUnitContext(Context, State);
		EnterRule(_localctx, 0, RULE_compileUnit);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 24;
			expression();
			State = 25;
			_la = TokenStream.LA(1);
			if ( !(_la==Eof || _la==NEWLINE) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CreateContext create() {
			return GetRuleContext<CreateContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ShowContext show() {
			return GetRuleContext<ShowContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeleteContext delete() {
			return GetRuleContext<DeleteContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FinishContext finish() {
			return GetRuleContext<FinishContext>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 2, RULE_expression);
		try {
			State = 31;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 27;
				create();
				}
				break;
			case T__0:
				EnterOuterAlt(_localctx, 2);
				{
				State = 28;
				show();
				}
				break;
			case T__5:
				EnterOuterAlt(_localctx, 3);
				{
				State = 29;
				delete();
				}
				break;
			case T__2:
				EnterOuterAlt(_localctx, 4);
				{
				State = 30;
				finish();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ShowContext : ParserRuleContext {
		public ShowContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_show; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitShow(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ShowContext show() {
		ShowContext _localctx = new ShowContext(Context, State);
		EnterRule(_localctx, 4, RULE_show);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CreateContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DescriptionContext description() {
			return GetRuleContext<DescriptionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TimeContext time() {
			return GetRuleContext<TimeContext>(0);
		}
		public CreateContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_create; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCreate(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CreateContext create() {
		CreateContext _localctx = new CreateContext(Context, State);
		EnterRule(_localctx, 6, RULE_create);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			Match(T__1);
			State = 36;
			description();
			State = 37;
			Match(T__2);
			State = 38;
			Match(T__3);
			State = 39;
			time();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FinishContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public FinishContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finish; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinish(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FinishContext finish() {
		FinishContext _localctx = new FinishContext(Context, State);
		EnterRule(_localctx, 8, RULE_finish);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 41;
			Match(T__2);
			State = 42;
			Match(T__4);
			State = 43;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeleteContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public DeleteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_delete; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDelete(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeleteContext delete() {
		DeleteContext _localctx = new DeleteContext(Context, State);
		EnterRule(_localctx, 10, RULE_delete);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(T__5);
			State = 46;
			Match(T__4);
			State = 47;
			id();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public FilterTimeContext filterTime() {
			return GetRuleContext<FilterTimeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FilterCompletionContext filterCompletion() {
			return GetRuleContext<FilterCompletionContext>(0);
		}
		public FilterContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filter; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilter(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterContext filter() {
		FilterContext _localctx = new FilterContext(Context, State);
		EnterRule(_localctx, 12, RULE_filter);
		try {
			State = 57;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__6:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				Match(T__6);
				State = 52;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case T__7:
				case T__8:
					{
					State = 50;
					filterTime();
					}
					break;
				case T__9:
				case T__10:
					{
					State = 51;
					filterCompletion();
					}
					break;
				case Eof:
					break;
				default:
					break;
				}
				}
				break;
			case T__7:
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				{
				State = 54;
				filterTime();
				State = 55;
				filterCompletion();
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterTimeContext : ParserRuleContext {
		public FilterTimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterTime; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterTimeContext filterTime() {
		FilterTimeContext _localctx = new FilterTimeContext(Context, State);
		EnterRule(_localctx, 14, RULE_filterTime);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 59;
			_la = TokenStream.LA(1);
			if ( !(_la==T__7 || _la==T__8) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FilterCompletionContext : ParserRuleContext {
		public FilterCompletionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_filterCompletion; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFilterCompletion(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FilterCompletionContext filterCompletion() {
		FilterCompletionContext _localctx = new FilterCompletionContext(Context, State);
		EnterRule(_localctx, 16, RULE_filterCompletion);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61;
			_la = TokenStream.LA(1);
			if ( !(_la==T__9 || _la==T__10) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DescriptionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TEXT() { return GetToken(TodoParser.TEXT, 0); }
		public DescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_description; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DescriptionContext description() {
		DescriptionContext _localctx = new DescriptionContext(Context, State);
		EnterRule(_localctx, 18, RULE_description);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63;
			Match(TEXT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TimeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TIME() { return GetToken(TodoParser.TIME, 0); }
		public TimeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_time; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTime(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TimeContext time() {
		TimeContext _localctx = new TimeContext(Context, State);
		EnterRule(_localctx, 20, RULE_time);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 65;
			Match(TIME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(TodoParser.NUMBER, 0); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ITodoVisitor<TResult> typedVisitor = visitor as ITodoVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(Context, State);
		EnterRule(_localctx, 22, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,17,70,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,1,0,1,0,1,0,1,1,1,1,1,1,1,1,3,
		1,32,8,1,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
		5,1,6,1,6,1,6,3,6,53,8,6,1,6,1,6,1,6,3,6,58,8,6,1,7,1,7,1,8,1,8,1,9,1,
		9,1,10,1,10,1,11,1,11,1,11,0,0,12,0,2,4,6,8,10,12,14,16,18,20,22,0,3,1,
		1,17,17,1,0,8,9,1,0,10,11,63,0,24,1,0,0,0,2,31,1,0,0,0,4,33,1,0,0,0,6,
		35,1,0,0,0,8,41,1,0,0,0,10,45,1,0,0,0,12,57,1,0,0,0,14,59,1,0,0,0,16,61,
		1,0,0,0,18,63,1,0,0,0,20,65,1,0,0,0,22,67,1,0,0,0,24,25,3,2,1,0,25,26,
		7,0,0,0,26,1,1,0,0,0,27,32,3,6,3,0,28,32,3,4,2,0,29,32,3,10,5,0,30,32,
		3,8,4,0,31,27,1,0,0,0,31,28,1,0,0,0,31,29,1,0,0,0,31,30,1,0,0,0,32,3,1,
		0,0,0,33,34,5,1,0,0,34,5,1,0,0,0,35,36,5,2,0,0,36,37,3,18,9,0,37,38,5,
		3,0,0,38,39,5,4,0,0,39,40,3,20,10,0,40,7,1,0,0,0,41,42,5,3,0,0,42,43,5,
		5,0,0,43,44,3,22,11,0,44,9,1,0,0,0,45,46,5,6,0,0,46,47,5,5,0,0,47,48,3,
		22,11,0,48,11,1,0,0,0,49,52,5,7,0,0,50,53,3,14,7,0,51,53,3,16,8,0,52,50,
		1,0,0,0,52,51,1,0,0,0,52,53,1,0,0,0,53,58,1,0,0,0,54,55,3,14,7,0,55,56,
		3,16,8,0,56,58,1,0,0,0,57,49,1,0,0,0,57,54,1,0,0,0,58,13,1,0,0,0,59,60,
		7,1,0,0,60,15,1,0,0,0,61,62,7,2,0,0,62,17,1,0,0,0,63,64,5,15,0,0,64,19,
		1,0,0,0,65,66,5,13,0,0,66,21,1,0,0,0,67,68,5,12,0,0,68,23,1,0,0,0,3,31,
		52,57
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
