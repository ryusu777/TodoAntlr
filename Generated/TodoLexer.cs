//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Users/inter/Documents/Tugas/7th/Compilation Technique/UTS/src/TodoAppCli/Todo.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class TodoLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, NUMBER=12, TIME=13, WORD=14, TEXT=15, WHITESPACE=16, 
		NEWLINE=17;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "LOWERCASE", "UPPERCASE", "DIGIT", "NUMBER", "TIME", 
		"WORD", "TEXT", "WHITESPACE", "NEWLINE"
	};


	public TodoLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public TodoLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'show'", "'add'", "'finish'", "'at'", "'#'", "'delete'", "'all'", 
		"'today'", "'yesterday'", "'complete'", "'incomplete'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		"NUMBER", "TIME", "WORD", "TEXT", "WHITESPACE", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Todo.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static TodoLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,17,158,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,1,0,1,0,1,0,1,0,
		1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,
		5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,
		1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
		9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,12,
		1,12,1,13,1,13,1,14,4,14,117,8,14,11,14,12,14,118,1,15,1,15,1,15,1,15,
		1,15,1,15,1,16,1,16,1,16,4,16,130,8,16,11,16,12,16,131,1,17,1,17,5,17,
		136,8,17,10,17,12,17,139,9,17,1,17,1,17,1,18,4,18,144,8,18,11,18,12,18,
		145,1,18,1,18,1,19,3,19,151,8,19,1,19,1,19,4,19,155,8,19,11,19,12,19,156,
		1,137,0,20,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,0,25,
		0,27,0,29,12,31,13,33,14,35,15,37,16,39,17,1,0,4,1,0,97,122,1,0,65,90,
		1,0,48,57,2,0,9,9,32,32,163,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
		0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
		0,19,1,0,0,0,0,21,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,41,1,0,0,0,3,46,1,0,0,0,5,50,1,0,0,
		0,7,57,1,0,0,0,9,60,1,0,0,0,11,62,1,0,0,0,13,69,1,0,0,0,15,73,1,0,0,0,
		17,79,1,0,0,0,19,89,1,0,0,0,21,98,1,0,0,0,23,109,1,0,0,0,25,111,1,0,0,
		0,27,113,1,0,0,0,29,116,1,0,0,0,31,120,1,0,0,0,33,129,1,0,0,0,35,133,1,
		0,0,0,37,143,1,0,0,0,39,154,1,0,0,0,41,42,5,115,0,0,42,43,5,104,0,0,43,
		44,5,111,0,0,44,45,5,119,0,0,45,2,1,0,0,0,46,47,5,97,0,0,47,48,5,100,0,
		0,48,49,5,100,0,0,49,4,1,0,0,0,50,51,5,102,0,0,51,52,5,105,0,0,52,53,5,
		110,0,0,53,54,5,105,0,0,54,55,5,115,0,0,55,56,5,104,0,0,56,6,1,0,0,0,57,
		58,5,97,0,0,58,59,5,116,0,0,59,8,1,0,0,0,60,61,5,35,0,0,61,10,1,0,0,0,
		62,63,5,100,0,0,63,64,5,101,0,0,64,65,5,108,0,0,65,66,5,101,0,0,66,67,
		5,116,0,0,67,68,5,101,0,0,68,12,1,0,0,0,69,70,5,97,0,0,70,71,5,108,0,0,
		71,72,5,108,0,0,72,14,1,0,0,0,73,74,5,116,0,0,74,75,5,111,0,0,75,76,5,
		100,0,0,76,77,5,97,0,0,77,78,5,121,0,0,78,16,1,0,0,0,79,80,5,121,0,0,80,
		81,5,101,0,0,81,82,5,115,0,0,82,83,5,116,0,0,83,84,5,101,0,0,84,85,5,114,
		0,0,85,86,5,100,0,0,86,87,5,97,0,0,87,88,5,121,0,0,88,18,1,0,0,0,89,90,
		5,99,0,0,90,91,5,111,0,0,91,92,5,109,0,0,92,93,5,112,0,0,93,94,5,108,0,
		0,94,95,5,101,0,0,95,96,5,116,0,0,96,97,5,101,0,0,97,20,1,0,0,0,98,99,
		5,105,0,0,99,100,5,110,0,0,100,101,5,99,0,0,101,102,5,111,0,0,102,103,
		5,109,0,0,103,104,5,112,0,0,104,105,5,108,0,0,105,106,5,101,0,0,106,107,
		5,116,0,0,107,108,5,101,0,0,108,22,1,0,0,0,109,110,7,0,0,0,110,24,1,0,
		0,0,111,112,7,1,0,0,112,26,1,0,0,0,113,114,7,2,0,0,114,28,1,0,0,0,115,
		117,3,27,13,0,116,115,1,0,0,0,117,118,1,0,0,0,118,116,1,0,0,0,118,119,
		1,0,0,0,119,30,1,0,0,0,120,121,3,27,13,0,121,122,3,27,13,0,122,123,5,58,
		0,0,123,124,3,27,13,0,124,125,3,27,13,0,125,32,1,0,0,0,126,130,3,23,11,
		0,127,130,3,25,12,0,128,130,3,27,13,0,129,126,1,0,0,0,129,127,1,0,0,0,
		129,128,1,0,0,0,130,131,1,0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,34,
		1,0,0,0,133,137,5,34,0,0,134,136,9,0,0,0,135,134,1,0,0,0,136,139,1,0,0,
		0,137,138,1,0,0,0,137,135,1,0,0,0,138,140,1,0,0,0,139,137,1,0,0,0,140,
		141,5,34,0,0,141,36,1,0,0,0,142,144,7,3,0,0,143,142,1,0,0,0,144,145,1,
		0,0,0,145,143,1,0,0,0,145,146,1,0,0,0,146,147,1,0,0,0,147,148,6,18,0,0,
		148,38,1,0,0,0,149,151,5,13,0,0,150,149,1,0,0,0,150,151,1,0,0,0,151,152,
		1,0,0,0,152,155,5,10,0,0,153,155,5,13,0,0,154,150,1,0,0,0,154,153,1,0,
		0,0,155,156,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,40,1,0,0,0,9,0,
		118,129,131,137,145,150,154,156,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
